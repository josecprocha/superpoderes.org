<?php

/**
 * This file is part of "School of Super Powers" Project.
 *
 * @author (c) José Cândido Pereira da Rocha <josecprocha@gmail.com>
 *
 * This source file is subject to the {@license ISC} license that is bundled
 * with this source code in the file LICENSE.md. Source is available in {@link
 * https://github.com/josecprocha/superpowers}.
 *
 * Made with Laravel — {@see https://github.com/laravel/laravel to know more
 * about this framework}.
 */

$header = <<<'EOF'
This file is part of "School of Super Powers" Project.

@author (c) José Cândido Pereira da Rocha <josecprocha@gmail.com>

This source file is subject to the {@license ISC} license that is bundled
with this source code in the file LICENSE.md. Source is available in {@link
https://github.com/josecprocha/superpowers}.

Made with Laravel — {@see https://github.com/laravel/laravel to know more
about this framework}.
EOF;

$finder = PhpCsFixer\Finder::create()
    ->exclude(['node_modules', 'vendor']) // Exclude directories from matching
    ->notPath(['node_modules', 'vendor']) // excludes files by path
    ->ignoreVCSIgnored(true) // excludes files/directories matching the .gitignore patterns
    ->in(__DIR__)
    ->append([__DIR__.'/php-cs-fixer'])
;

$config = PhpCsFixer\Config::create()
    ->setRiskyAllowed(false)
    ->setRules([
        // More info: vendor\friendsofphp\php-cs-fixer\src\RuleSet.php
        '@PHP73Migration' => true,
        //'@PHP73Migration:risky' => false,
        //'@PHPUnit73Migration:risky' => false,
        '@PhpCsFixer' => true, // include Symfony, whose include PSR2.
        '@PhpCsFixer:risky' => false,
        'header_comment' => ['header' => $header, 'commentType' => 'PHPDoc'],
        'method_argument_space' => ['on_multiline' => 'ensure_fully_multiline'],
        // 'list_syntax' => ['syntax' => 'short'],
        // 'array_syntax' => ['syntax' => 'short'],
    ])
    ->setFinder($finder)
;

// special handling of fabbot.io service if it's using too old PHP CS Fixer
// version
if (false !== getenv('FABBOT_IO')) {
    try {
        PhpCsFixer\FixerFactory::create()
            ->registerBuiltInFixers()
            ->registerCustomFixers($config->getCustomFixers())
            ->useRuleSet(new PhpCsFixer\RuleSet($config->getRules()))
        ;
    } catch (PhpCsFixer\ConfigurationException\InvalidConfigurationException $e) {
        $config->setRules([]);
    } catch (UnexpectedValueException $e) {
        $config->setRules([]);
    } catch (InvalidArgumentException $e) {
        $config->setRules([]);
    }
}

return $config;

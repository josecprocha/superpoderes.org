{
  "folders": [
    {
      "path": "."
    }
  ],
  "settings": {
    "editor.detectIndentation": false,
    "editor.formatOnSave": true,
    "editor.rulers": [80, 120],
    "json.format.enable": false,
    // https://code.visualstudio.com/docs/languages/identifiers
    "files.associations": {
      "*.dist": "php"
    },

    /**
     * Beautify
     *
     * Beautify javascript, JSON, CSS, Sass, and HTML in Visual Studio Code.
     * I prefer do not use it on JS files, just html.
     * @link https://github.com/HookyQR/VSCodeBeautify
     * @link https://github.com/HookyQR/VSCodeBeautify/blob/master/Settings.md
     * To disable it for JS files, see link below:
     * @link https://github.com/HookyQR/VSCodeBeautify/issues/49
     */

    "beautify.ignore": [
      "/node_modules/**/*",
      "/vendor/**/*",
      "**/*.js",
      "**/*.jsx",
      "**/*.json",
      "**/*.css",
      "**/*.scss"
    ],
    // https://css-tricks.com/prettier-beautify/
    "beautify.language": {
      "html": ["htm", "html"],
      "css": [],
      "js": []
    },

    /**
     * PHP CodeSniffer
     *
     * "tokenizes" PHP, JavaScript and CSS files and detects violations of a
     * defined set of coding standards.
     * @link https://github.com/squizlabs/PHP_CodeSniffer
     */

    // https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs
    "phpcs.executablePath": "vendor\\squizlabs\\php_codesniffer\\bin\\phpcs",
    // https://packagist.org/packages/escapestudios/symfony2-coding-standard
    "phpcs.standard": "vendor/escapestudios/symfony2-coding-standard/Symfony",
    "phpcs.ignorePatterns": ["**/*.blade.php"],
    "phpcs.showSources": true,

    /**
     * PHP CS Fixer
     *
     * A tool to automatically fix PHP Coding Standards issues {@link
     * https://cs.symfony.com}
     * @link https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md
     * @link https://www.php-fig.org/psr/psr-2/
     * @link https://symfony.com/doc/current/contributing/code/standards.html
     * PSR1 < PSR2 < Symfony < PhpCsFixer.
     * @link https://github.com/junstyle/vscode-php-cs-fixer
     * @see vendor/friendsofphp/php-cs-fixer/src/RuleSet.php
     */

    "php-cs-fixer.executablePath": "vendor\\friendsofphp\\php-cs-fixer\\php-cs-fixer",
    "php-cs-fixer.executablePathWindows": "php-cs-fixer.bat",
    // it needs run ```composer global require friendsofphp/php-cs-fixer```
    "php-cs-fixer.onsave": true,
    "php-cs-fixer.rules": "@PhpCsFixer",
    "php-cs-fixer.config": ".php_cs.dist",
    "php-cs-fixer.allowRisky": true,
    "php-cs-fixer.pathMode": "override",
    "php-cs-fixer.exclude": ["**/*.blade.php"],
    "php-cs-fixer.autoFixByBracket": true,
    "php-cs-fixer.autoFixBySemicolon": false,
    "php-cs-fixer.formatHtml": false,
    "php-cs-fixer.documentFormattingProvider": true,

    /**
     * Prettier
     *
     * An opinionated code formatter {@link https://prettier.io/}
     * @link https://github.com/prettier/prettier
     * @link https://www.freecodecamp.org/news/integrating-prettier-with-eslint-and-stylelint-99e74fede33f/
     */

    "prettier.eslintIntegration": true,
    "prettier.stylelintIntegration": true,
    "prettier.endOfLine": "lf",
    "prettier.requireConfig": true,

    /**
     * eslint
     *
     * The pluggable linting utility for JavaScript and JSX
     * @link https://eslint.org/
     */

    "eslint.autoFixOnSave": false,

    /**
     * PHP DocBlocker
     *
     * Basic PHP DocBlocking extension.
     * @link https://github.com/neild3r/vscode-php-docblocker
     * @link https://www.open-emr.org/wiki/index.php/How_to_Document_Your_Code_Properly
     */

    // set to false to disable the gap between the description and tags
    "php-docblocker.gap": true,
    // set to true to add a gap between the param and return tags
    "php-docblocker.returnGap": true,
    // set to false to turn off the automatic void return type when it can't be
    // determined
    "php-docblocker.returnVoid": false,
    // an array of extra tags to add to each DocBlock (These can include
    // tabstops and snippet variables)
    "php-docblocker.extra": [""],
    // Whether we should use short type names. e.g. bool or boolean
    "php-docblocker.useShortNames": false,
    // When adding type hints for class names search namespace use statements
    // and qualify the class
    "php-docblocker.qualifyClassNames": true,
    // An object containing your default author tag settings
    "php-docblocker.author": {
      "name": "(c) José Cândido Pereira da Rocha",
      "email": "josecprocha@gmail.com"
    }
  }
}
